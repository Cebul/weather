<?php

/**
 * @file
 * A module that displays recent weather forecast
 */


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param $path
 *   Which path of the site we're using to display help
 * @param $arg
 *   Array that holds the current path as returned from arg() function
 */
function weather_help($path, $arg) {
  switch ($path) {
    case "admin/help#weather";
    return '' . t("Displays weather forecast") . '';
  break;
  }
}
/**
 * Implements hook_permission().
 */
function weather_permission() {
  return array(
    'forecaster' => array(
      'title' => t('Administer Weather Module'),
      'description' => t('Perform administration tasks for the Weather module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function weather_menu() {
  // Admin page.
  $items['admin/config/services/weather'] = array(
    'title' => 'Weather module settings',
    'description' => 'Perform administration tasks for Weather Module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weather_admin_form'),
    'access arguments' => array('forecaster'),
    'file' => 'weather.admin.inc'
  );
  $items['weather'] = array(
    'title' => '5 Day Weather Forecast for Wrocław, PL',
    'page callback' => 'weather_5_day_forecast',
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['formforecast'] = array(
    'title' => 'Choose your town form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weather_nameform'),
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tomorrow_sum'] = array(
    'title' => 'Look at tomorrow\'s summary.',
    'page callback' => 'create_a_node',
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['Warsaw'] = array(
    'title' => 'Current weather in Warsaw',
    'page callback' => 'weather_warsaw',
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['London'] = array(
    'title' => 'Current weather in London',
    'page callback' => 'weather_london',
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM
    );
  $items['Paris'] = array(
    'title' => 'Current weather in Paris',
    'page callback' => 'weather_paris',
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM
    );
  $items['Moskow'] = array(
    'title' => 'Current weather in Moskow',
    'page callback' => 'weather_moskow',
    'access arguments' => array('forecaster'),
    'type' => MENU_NORMAL_ITEM
    );

  return $items;
}

/**
 * Getting data for 5 day weather forecast in Wrocław.
 */

function weather_5_day_forecast() {

  $wroclaw_json = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/astronomy/forecast10day/q/Poland/Wroclaw.json");
  $wroclaw = json_decode($wroclaw_json);
  $country_name = $wroclaw->{'location'}->{'country_name'};
  $sunrise_h = $wroclaw->{'sun_phase'}->{'sunrise'}->{'hour'};
  $sunrise_min = $wroclaw->{'sun_phase'}->{'sunrise'}->{'minute'};
  $sunset_h = $wroclaw->{'sun_phase'}->{'sunset'}->{'hour'};
  $sunset_min = $wroclaw->{'sun_phase'}->{'sunset'}->{'minute'};

  $output = '';

  for ($i=0; $i<10; $i++) {

      $day_time = $wroclaw->{'forecast'}->{'txt_forecast'}->{'forecastday'}[$i]->title;
      $day_precip = $wroclaw->{'forecast'}->{'simpleforecast'}->{'forecastday'}[$i]->qpf_day->mm;
      $night_precip = $wroclaw->{'forecast'}->{'simpleforecast'}->{'forecastday'}[$i]->qpf_night->mm;
      $humidity = $wroclaw->{'forecast'}->{'simpleforecast'}->{'forecastday'}[$i]->avehumidity;

      $output .= t('<br />Day: ' . $day_time);
      $output .= t('<br />Sunrise: ' . $sunrise_h . ':' . $sunrise_min);
      $output .= t('<br />Sunset: ' . $sunset_h . ':' . $sunset_min);
      $output .= t('<br />Daytime precipitation: ' . $day_precip . ' mm');
      $output .= t('<br />Daytime humidity: ' . $humidity);
      $output .= t('<br />Night time precipitation: ' . $night_precip . ' mm');
      $output .= t('<br />Night time humidity: ' . $humidity);
      $output .= t('<br />-------------------');
      $i++;
    }
    return $output;
}

/**
 * Getting weather data (Warsaw).
 */

function weather_warsaw() {
  $json_string = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/conditions/forecast/q/Poland/Warsaw.json");
  $parsed_json = json_decode($json_string);
  $location = $parsed_json->{'location'}->{'city'};
  $country_name = $parsed_json->{'location'}->{'country_name'};
  $temp_c = $parsed_json->{'current_observation'}->{'temp_c'};
  $weather = $parsed_json->{'current_observation'}->{'weather'};

  $output = '';
  $output = t('City: ' . $location . '<br />Country: ' . $country_name . '<br />Current temperature: ' . $temp_c . '<br />Current weather: ' . $weather);
  return $output;
  }

/**
 * Getting weather data (London).
 */

function weather_london() {
  $json_string = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/conditions/forecast/q/England/London.json");
  $parsed_json = json_decode($json_string);
  $location = $parsed_json->{'location'}->{'city'};
  $country_name = $parsed_json->{'location'}->{'country_name'};
  $temp_c = $parsed_json->{'current_observation'}->{'temp_c'};
  $weather = $parsed_json->{'current_observation'}->{'weather'};


  $output = '';
  $output = t('City: ' . $location . '<br />Country: ' . $country_name . '<br />Current temperature: ' . $temp_c . '<br />Current weather: ' . $weather);

  return $output;
  }

/**
 * Getting weather data (Paris).
 */

function weather_paris() {
  $json_string = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/conditions/forecast/q/France/Paris.json");
  $parsed_json = json_decode($json_string);
  $location = $parsed_json->{'location'}->{'city'};
  $country_name = $parsed_json->{'location'}->{'country_name'};
  $temp_c = $parsed_json->{'current_observation'}->{'temp_c'};
  $weather = $parsed_json->{'current_observation'}->{'weather'};

  $output = '';
  $output = t('City: ' . $location . '<br />Country: ' . $country_name . '<br />Current temperature: ' . $temp_c . '<br />Current weather: ' . $weather);

  return $output;
}

/**
 * Getting weather data (Moskow).
 */

function weather_moskow() {

  $json_string = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/conditions/forecast/q/Moskow.json");
  $parsed_json = json_decode($json_string);
  $location = $parsed_json->{'location'}->{'city'};
  $country_name = $parsed_json->{'location'}->{'country_name'};
  $temp_c = $parsed_json->{'current_observation'}->{'temp_c'};
  $weather = $parsed_json->{'current_observation'}->{'weather'};

  $output = '';
  $output = t('City: ' . $location . '<br />Country: ' . $country_name . '<br />Current temperature: ' . $temp_c . '<br />Current weather: ' . $weather);

  return $output;
}

/**
 * Town dropdown list form.
 */

function weather_nameform() {

  $form['town'] = array(
    '#title' => t('Town'),
    '#type' => 'fieldset',
    '#description' => t('You can choose your town.'),
    '#collapsible' => TRUE,
    '#collpsed' => FALSE
    );
  $form['town_options'] = array(
    '#type' => 'value',
    '#value' => array(t('Warsaw'), t('London'), t('Paris'), t('Moskow'))
    );
  $form['town']['your_town'] = array(
    '#title' => t('Your town'),
    '#type' => 'select',
    '#description' => t('Choose your town.'),
    '#options' => $form['town_options']['#value']
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check')
    );
  return $form;
}

/**
 * Implements hook_submit().
 */

function weather_nameform_submit($form, &$form_state) {

  $city_key = $form_state['values']['your_town'];
  $city = $form_state['values']['town_options'][$city_key];
  $form_state['redirect'] = url('/' . $city, array('absolute' => TRUE, ));
}

/**
 * Getting tomorrow's forecast summary
 */

function tomorrow_forecast() {

  $wroclaw_json = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/conditions/forecast/q/Poland/Wroclaw.json");
  $wroclaw = json_decode($wroclaw_json);
  $weather_sum = $wroclaw->{'forecast'}->{'txt_forecast'}->{'forecastday'}[2]->fcttext_metric;
  $output = '';
  $output = $weather_sum;

  return $output;

}
/**
 * Creating a new node object
 */

function create_a_node() {

  if (user_access('forecaster')) {
  $sum_text = 'Look at the tomorrow\'s weather in Wrocław.';

  $node = new stdClass();
  $node->type = 'article';
  node_object_prepare($node);

  $node->title    = 'Tomorrow\'s weather summary.';
  $node->language = LANGUAGE_NONE;
  //$node->status = NODE_NOT_PUBLISHED;

  $node->body[$node->language][0]['value']   = tomorrow_forecast();
  $node->body[$node->language][0]['summary'] = text_summary($sum_text);
  $node->body[$node->language][0]['format']  = 'full_html';

  $node->comment = COMMENT_NODE_CLOSED;
  $path = 'tomorrow_sum';
  $node->path = array('alias' => $path);

  $node = node_submit($node);
  node_save($node);
  }
}

/**
 * Implements hook_block_info().
 */

function weather_block_info() {
  $blocks['weather'] = array(
  // The name that will appear in the block list.
    'info' => t('Todays weather summary'),
    'access arguments' => array('forecaster'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */

function weather_block_view($delta = '') {

  switch ($delta) {
    case 'weather':
      $block['subject'] = t('Today\'s weather summary');
      $block['content'] = weather_block_contents($delta);
      return $block;
      break;
  }
}

/**
 * Get data from Wunderground Weather API.
 */

function weather_block_contents($delta) {

  switch ($delta) {
    case 'weather':
    if (user_access('forecaster')) {
      $json_string = file_get_contents("http://api.wunderground.com/api/5c324a3b584e2557/geolookup/conditions/forecast/q/Poland/Wroclaw.json");
      $parsed_json = json_decode($json_string);

      $output = '';
      $output .= ' City: ' . $parsed_json->{'location'}->{'city'} . '<br />';
      $output .= ' Country: ' . $parsed_json->{'location'}->{'country_name'} . '<br />';
      $output .= ' Temperature: ' . $parsed_json->{'current_observation'}->{'temp_c'} . '°C' . '<br />';
      $output .= ' Today\'s weather: ' . $parsed_json->{'current_observation'}->{'weather'} . '<br />';

      return $output;
    }
  break;
  }
}
